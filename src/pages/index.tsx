import styles from "./index.module.css";
import { type NextPage } from "next";
import Head from "next/head";
import { useUser } from "@clerk/nextjs";
import { Input, message, Skeleton, Button, Table } from "antd";
import { useState, useEffect, useRef } from "react";
import { OK } from "~/utils/restful"

const post = (url: string, data: any) => {
  return fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  }).then(response => {
    return response.json();
  }).then(responseData => {
    const trueData = responseData.data;
    if (responseData.status === OK) {
      return trueData;
    } else {
      message.error(responseData.msg);
      return Promise.reject(trueData);
    }
  });
};

const { Search } = Input;

const NOT_DONE = 0;
const DONE = 1;

const Home: NextPage = () => {
  const userObj = useUser();
  const userData = userObj?.user;

  const [loadingList, setLoadingList] = useState(true);
  const [todoList, setTodoList] = useState([]);
  const [reloadList, setReloadList] = useState(false);
  const [content, setContent] = useState("");

  const [messageApi, contextHolder] = message.useMessage();

  const newRef = useRef(false);
  const updateRef = useRef(false);
  const deleteRef = useRef(false);

  useEffect(() => {
    setLoadingList(true);
    const queryListPostData = { userId: userData?.id };
    post("/api/todo/getAll", queryListPostData).then(listData => {
      setTodoList(listData);
    }).finally(() => {
      setLoadingList(false);
    })
  }, [reloadList]);

  const showLoading = () => {
    messageApi.open({
      type: "loading",
      content: "操作中",
      duration: 0,
    });
  };

  const hideLoading = () => { messageApi.destroy() };

  const newHandler = () => {
    if (newRef.current) {
      return;
    }
    newRef.current = true;
    showLoading();
    const newPostData = {
      content,
      status: NOT_DONE,
      userId: userData?.id,
    };
    post("/api/todo/new", newPostData).then(() => {
      setReloadList(!reloadList);
      message.success("新增成功");
      setContent("");
    }).finally(() => {
      newRef.current = false;
      hideLoading();
    });
  };

  const updateStatusHandler = (todoObj: any) => {
    if (updateRef.current) {
      return;
    }
    updateRef.current = true;
    showLoading();
    const updatePostData = todoObj;
    updatePostData.status = 1 - updatePostData.status;
    return post("/api/todo/update", updatePostData).then(() => {
      setReloadList(!reloadList);
    }).finally(() => {
      updateRef.current = false;
      hideLoading();
    });
  };

  const deleteHandler = (id: string) => {
    if (deleteRef.current) {
      return;
    }
    deleteRef.current = true;
    showLoading();
    const deletePostData = { id }
    return post("/api/todo/delete", deletePostData).then(() => {
      setReloadList(!reloadList);
    }).finally(() => {
      deleteRef.current = false;
      hideLoading();
    });
  }

  const tableColumns: any = [
    {
      title: "内容",
      dataIndex: "content",
    },
    {
      title: "状态",
      dataIndex: "status",
      render: (v: any) => v == DONE ? "未完成" : "完成",
    },
    {
      title: "操作",
      dataIndex: "id",
      render: (id: string, todoObj: any) => {
        return (
          <>
            <Button onClick={() => updateStatusHandler(todoObj)} className={styles.pl0} type="link">修改状态</Button>
            <Button onClick={() => deleteHandler(id)} style={{ paddingLeft: 0 }} type="link">删除</Button>
          </>
        )
      },
    }
  ]

  return (
    <>
      <Head>
        <title>待办事项</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.pageContainer}>
        {contextHolder}
        <div className={styles.headerCls}>
          <span className={styles.logo}>待办事项</span>
          <img className={styles.avatar} src={userData?.profileImageUrl} />
        </div>
        <div>
          <Search
            allowClear
            value={content}
            placeholder="请输入代办项目"
            enterButton="新&nbsp;&nbsp;增"
            onSearch={newHandler}
            onChange={event => setContent(event.target.value)}
            className={styles.mb20}
          />

          <Skeleton loading={loadingList} active={true}>
            <Table
              columns={tableColumns}
              dataSource={todoList}
              pagination={false}
              rowKey="id"
            />
          </Skeleton>
        </div>
      </main>
    </>
  );
};

export default Home;
